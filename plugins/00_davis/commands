#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

case "$1" in
  receive)
    if [[ -z $2 ]]; then
        echo "Please specify an app to test"
        exit 1
    fi

    APP="$2"; IMAGE="app/$APP";
    echo "-----> Building $APP ..."
    cat | dokku build $APP
    echo "-----> Testing $APP ..."
    dokku deploy $APP
    echo "-----> Cleaning up ..."
    dokku cleanup
    echo "=====> Fin."
    echo
    ;;

  cleanup)
    # delete all non-running containers
    docker ps -a | grep 'Exit' |  awk '{print $1}' | xargs docker rm &> /dev/null &
    # delete unused images
    docker images | grep '<none>' |  awk '{print $3}'  | xargs docker rmi &> /dev/null &
    ;;

  build)
    if [[ -z $2 ]]; then
        echo "Please specify an app to build"
        exit 1
    fi

    APP="$2"; IMAGE="app/$APP"; CACHE_DIR="$DOKKU_ROOT/$APP/cache"
    id=$(cat | docker run -i -a stdin lonnen/buildstep /bin/bash -c "mkdir -p /app && tar -xC /app")
    test $(docker wait $id) -eq 0
    docker commit $id $IMAGE > /dev/null
    [[ -d $CACHE_DIR ]] || mkdir $CACHE_DIR
    pluginhook pre-build $APP
    id=$(docker run -d -v $CACHE_DIR:/cache $IMAGE /build/builder)
    docker attach $id
    test $(docker wait $id) -eq 0
    docker commit $id $IMAGE > /dev/null
    pluginhook post-build $APP
    ;;

  deploy)
    if [[ -z $2 ]]; then
        echo "Please specify an app to deploy"
        exit 1
    fi

    APP="$2"; IMAGE="app/$APP"
    pluginhook pre-deploy $APP

    # kill the app if already running
    if [[ -f "$DOKKU_ROOT/$APP/CONTAINER" ]]; then
      oldid=$(< "$DOKKU_ROOT/$APP/CONTAINER")
      docker inspect $oldid &> /dev/null && docker kill $oldid > /dev/null
    fi

    # run the tests
    DOCKER_ARGS=$(: | pluginhook docker-args $APP)
    id=$(docker run -d -p 5000 -e PORT=5000 $DOCKER_ARGS $IMAGE /bin/bash -c "/start")
    timeout=120 # 120 * 5 seconds = 10 minutes
    echo "waiting while tests run. this may take up to 10 minutes"
    while [ $timeout -gt 0 ] && [ $(docker ps | grep $id) ]; do
        printf "."
        timeout=$(expr $timeout - 1)
        sleep 5s
    done
    printf "\n"
    if [ $(docker ps | grep $id) ]; then
        echo "time's up! pencils down!"
        docker inspect $id &> /dev/null && docker kill $id > /dev/null
    fi
    echo "tests finished. here's the output:"
    docker logs $id
    pluginhook post-deploy $APP $port
    ;;

  delete)
    if [[ -z $2 ]]; then
        echo "Please specify an app to delete"
        exit 1
    fi
    APP="$2"; IMAGE="app/$APP";
    if [[ ! -d "$DOKKU_ROOT/$APP" ]]; then
        echo "App does not exist"
        exit 1
    fi

    pluginhook pre-delete $APP
    if [[ -f "$DOKKU_ROOT/$APP/CONTAINER" ]]; then
      ID=$(< "$DOKKU_ROOT/$APP/CONTAINER")

      docker stop $ID > /dev/null || true
      docker rm $ID  > /dev/null || true
    fi

    docker images | grep $IMAGE | awk '{print $3}' | xargs docker rmi &> /dev/null &

    pluginhook post-delete $APP
    ;;

  logs)
    if [[ -z $2 ]]; then
        echo "Please specify an app to run the command on"
        exit 1
    fi
    APP="$2";
    if [[ ! -d "$DOKKU_ROOT/$APP" ]]; then
        echo "App $APP does not exist"
        exit 1
    fi

    if [[ -f "$DOKKU_ROOT/$APP/CONTAINER" ]]; then
      CONTAINER=$(<$DOKKU_ROOT/$APP/CONTAINER)
      if [[ $3 == "-t" ]]; then
        docker logs --follow $CONTAINER
      else
        docker logs $CONTAINER | tail -n 100
      fi
    else
      echo "Application's container not found"
    fi
    ;;

  run)
    echo "run called!"
    # if [[ -z $2 ]]; then
    #     echo "Please specify an app to run the command on"
    #     exit 1
    # fi
    # APP="$2"; IMAGE="app/$APP"
    # if [[ ! -d "$DOKKU_ROOT/$APP" ]]; then
    #     echo "App $APP does not exist"
    #     exit 1
    # fi
    # shift 2
    #
    # DOCKER_ARGS=$(: | pluginhook docker-args $APP)
    # docker run -i -t $DOCKER_ARGS $IMAGE /exec "$@"
    ;;

  version)
    cat "$DOKKU_ROOT/VERSION" || {
      echo "Unable to determine dokku's version" 2>&1
      exit 1
    }
    ;;

  help)
    cat && cat<<EOF
    receive <app>                                   Test an application
    cleanup                                         Clean up nonrunning containers and unused docker images
    build <app>                                     Create a docker image for an application
    deploy <app>                                    Run tests against an application's docker iamge
    delete <app>                                    Delete an application
    logs <app> [-t]                                 Show the last logs for an application (-t follows)
    run <app> <cmd>                                 Disabled
    version                                         Print davis's version
    help                                            Print the list of commands
    plugins                                         Print active plugins
    plugins-install                                 Install active plugins
EOF
    ;;

esac
